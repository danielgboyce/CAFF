ylab('')
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
plot(st_geometry(subset(stockpoly, stock %in% unique(stockpoly$stock)[1])))
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
plot(st_geometry(df))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
plot(st_geometry(subset(stockpoly, stock %in% unique(stockpoly))),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
scale_x_continuous(expand=c(0,0),limits=c(-145,-42))+
scale_y_continuous(expand=c(0,0),limits=c(35,80))
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
scale_x_continuous(limits=c(-145,-42))+
scale_y_continuous(limits=c(35,80))
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf("geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
dim(stockpoly)
length(unique(stockpoly$stock))
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("stockselect", "Stock:", choices = unique(stockpoly$stock)),"Select stock"
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock %in% input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
p<-ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
print(p)
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
server <- function(input, output) {
rfun<-reactive({
return(subset(stockpoly,stock==input$stockselect))
})
output$distPlot <- renderPlot({
df<-rfun()
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("selectedstock", "Stock:", choices = unique(stockpoly$stock)),"Select stock"
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
currentstock<-reactive({ input$selectedstock })
output$distPlot <- renderPlot({
df<-subset(stockpoly,stock==currentstock())
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
currentstock<-reactive({ input$selectedstock })
output$distPlot <- renderPlot({
df<-subset(stockpoly,stockpoly@stock==currentstock())
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=0.5)+
coord_sf(lims_method="geometry_bbox")
##plot(st_geometry(df),xlim=xlm,ylim=ylm)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
head(stockpoly)
a<-filter(stockpoly,speciesg=='Salmonids')
spl<-sf_as_st(stockpoly)
spl<-as(stockpoly,'Spatial')
spl<-as_Spatial(stockpoly)
spl<-as(stockpoly,'Spatial')
st_write(stockpoly,paste(datadir,'/shapefiles/stocks/stockpoly.shp',sep=''),append=FALSE)
atl<-subset(stockpoly,!(region %in% c('Pacific', 'Central and Arctic')))
xlm<-c(-83,-42)
ylm<-c(35,80)
lw<-0.5
speciesgid<-unique(atl$speciesg)
l<-list()
for(i in 1:length(speciesgid)){
b<-subset(atl,speciesg %in% speciesgid[i])
print(i)
print(unique(b$speciesg))
l[[i]]<-ggplot()+
##  geom_sf(data=a,fill=NA,inherit.aes=FALSE,color='black',lwd=lw)+
geom_sf(data=b,fill='firebrick3',inherit.aes=FALSE,color=NA,lwd=lw)+
geom_sf(data=wcm,col=NA,fill='gray70',inherit.aes = FALSE,lwd=0.001)+
scale_x_continuous(expand=c(0,0),limits=xlm)+
scale_y_continuous(expand=c(0,0),limits=ylm)+
##  geom_sf_text(data=plgr,aes(label = areacode),alpha=1,size=2.5)+
##  geom_sf_text(data=subset(plgr,areacode %in% c('2J3KL')),aes(label = areacode),alpha=1,size=3,col='white')+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
panel.background = element_rect(fill = 'white'),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
strip.text.x = element_text(size = 9),
panel.border=element_rect(colour="black",fill=NA,size=lw))+
xlab('')+
ylab('')+
facet_wrap(~stock)+
ggtitle(unique(b$speciesg))
}
l[[1]]
library(shiny)
library(sf)
library(ggplot2)
##runExample("01_hello")
stockpoly<-st_read('N:/data/CAFF/data/shapefiles/stocks/stockpoly.shp')
wcm<-st_read('N:/data/shapefiles/naturalearthdata_ne_50m_land_poly/ne_50m_land.shp')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("CAFF Stock Areas"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("selectedregion",
label="Region:",
choices = unique(stockpoly$region),
selected=TRUE),
selectInput("selectedstock",
label="Stock:",
choices = unique(stockpoly$stock),
selected=TRUE),
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput("distPlot")
)
)
)
# Define server logic required
server <- function(input, output) {
currentregion<-reactive({input$selectedregion})
currentstock<-reactive({input$selectedstock})
output$distPlot <- renderPlot({
df<-subset(stockpoly,region %in% currentregion() &
stock %in% currentstock())
##observe({   updateSelectInput(session, "User", choices = as.character(dat5[dat5$email==input$Select, date]))
##    })
observe({
updateSelectInput(session, "User", choices = as.character(df[dat5$region==input$selectedregion, selectedstock]))
})
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick1',inherit.aes=FALSE,color=NA,lwd=0.5)+
##coord_sf(lims_method="geometry_bbox")
geom_sf(data=wcm,col=NA,fill='gray70',inherit.aes = FALSE,lwd=0.001)+
scale_x_continuous(expand=c(0,0),limits=c(-145,-42))+
scale_y_continuous(expand=c(0,0),limits=c(35,80))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
panel.background = element_rect(fill = 'white'),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
strip.text.x = element_text(size = 9),
panel.border=element_rect(colour="black",fill=NA,size=0.5))+
xlab('')+
ylab('')
})
}
# Define server logic required
server <- function(input, output) {
currentregion<-reactive({input$selectedregion})
currentstock<-reactive({input$selectedstock})
output$distPlot <- renderPlot({
df<-subset(stockpoly,region %in% currentregion() &
stock %in% currentstock())
##observe({   updateSelectInput(session, "User", choices = as.character(dat5[dat5$email==input$Select, date]))
##    })
observe({
updateSelectInput(session, "User", choices = as.character(df[df$region==input$selectedregion, selectedstock]))
})
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick1',inherit.aes=FALSE,color=NA,lwd=0.5)+
##coord_sf(lims_method="geometry_bbox")
geom_sf(data=wcm,col=NA,fill='gray70',inherit.aes = FALSE,lwd=0.001)+
scale_x_continuous(expand=c(0,0),limits=c(-145,-42))+
scale_y_continuous(expand=c(0,0),limits=c(35,80))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
panel.background = element_rect(fill = 'white'),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
strip.text.x = element_text(size = 9),
panel.border=element_rect(colour="black",fill=NA,size=0.5))+
xlab('')+
ylab('')
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define server logic required
server <- function(input, output) {
currentregion<-reactive({input$selectedregion})
currentstock<-reactive({input$selectedstock})
output$distPlot <- renderPlot({
df<-subset(stockpoly,region %in% currentregion() &
stock %in% currentstock())
##observe({   updateSelectInput(session, "User", choices = as.character(dat5[dat5$email==input$Select, date]))
##    })
observe({
updateSelectInput(session, "selectedstock", choices = as.character(df[df$region==input$selectedregion, stock]))
})
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick1',inherit.aes=FALSE,color=NA,lwd=0.5)+
##coord_sf(lims_method="geometry_bbox")
geom_sf(data=wcm,col=NA,fill='gray70',inherit.aes = FALSE,lwd=0.001)+
scale_x_continuous(expand=c(0,0),limits=c(-145,-42))+
scale_y_continuous(expand=c(0,0),limits=c(35,80))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
panel.background = element_rect(fill = 'white'),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
strip.text.x = element_text(size = 9),
panel.border=element_rect(colour="black",fill=NA,size=0.5))+
xlab('')+
ylab('')
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
##install.packages('shiny')
library(shiny)
library(sf)
library(ggplot2)
##runExample("01_hello")
stockpoly<-st_read('N:/data/CAFF/data/shapefiles/stocks/stockpoly.shp')
wcm<-st_read('N:/data/shapefiles/naturalearthdata_ne_50m_land_poly/ne_50m_land.shp')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("CAFF Stock Areas"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("selectedregion",
label="Region:",
choices = unique(stockpoly$region),
selected=TRUE),
selectInput("selectedstock",
label="Stock:",
choices = unique(stockpoly$stock),
selected=TRUE),
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput("distPlot")
)
)
)
# Define server logic required
server <- function(input, output) {
currentregion<-reactive({input$selectedregion})
currentstock<-reactive({input$selectedstock})
output$distPlot <- renderPlot({
df<-subset(stockpoly,region %in% currentregion() &
stock %in% currentstock())
##observe({   updateSelectInput(session, "User", choices = as.character(dat5[dat5$email==input$Select, date]))
##    })
observe({
updateSelectInput(session, "selectedstock", choices = as.character(df[df$region==input$selectedregion, stock]))
})
xlm<-c(-145,-42)
ylm<-c(35,80)
lw<-0.5
ggplot()+
geom_sf(data=df,fill='firebrick1',inherit.aes=FALSE,color=NA,lwd=0.5)+
##coord_sf(lims_method="geometry_bbox")
geom_sf(data=wcm,col=NA,fill='gray70',inherit.aes = FALSE,lwd=0.001)+
scale_x_continuous(expand=c(0,0),limits=c(-145,-42))+
scale_y_continuous(expand=c(0,0),limits=c(35,80))+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
panel.background = element_rect(fill = 'white'),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank(),
strip.text.x = element_text(size = 9),
panel.border=element_rect(colour="black",fill=NA,size=0.5))+
xlab('')+
ylab('')
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
